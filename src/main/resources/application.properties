# ----------------------------------------------------------------
# 1) JDBC / Hibernate (Railway Postgres env vars)
# ----------------------------------------------------------------
spring.datasource.url=jdbc:postgresql://${PGHOST}:${PGPORT}/${PGDATABASE}?sslmode=require
spring.datasource.username=${PGUSER}
spring.datasource.password=${PGPASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Let Hibernate manage the schema (update in dev, validate/create in prod as you like)
spring.jpa.hibernate.ddl-auto=update

# (Optional) show SQL in your logs for debugging
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Force the Postgres dialect explicitly
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ----------------------------------------------------------------
# 2) Thymeleaf templates (your HTML UIs)
# ----------------------------------------------------------------
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false

# ----------------------------------------------------------------
# 3) Embedded server
# ----------------------------------------------------------------
server.port=8080

# ----------------------------------------------------------------
# 4) Mail (for future “forgot password” flows)
# ----------------------------------------------------------------
spring.mail.host=${SMTP_HOST:}
spring.mail.port=${SMTP_PORT:25}
spring.mail.username=${SMTP_USER:}
spring.mail.password=${SMTP_PASS:}
spring.mail.properties.mail.smtp.auth=${SMTP_AUTH:false}
spring.mail.properties.mail.smtp.starttls.enable=${SMTP_STARTTLS:false}
